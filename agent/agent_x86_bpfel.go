// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package agent

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type agentConnEvtT struct {
	ConnInfo struct {
		ConnId struct {
			Upid struct {
				Pid            uint32
				_              [4]byte
				StartTimeTicks uint64
			}
			Fd   int32
			_    [4]byte
			Tsid uint64
		}
		ReadBytes  uint64
		WriteBytes uint64
		Laddr      struct {
			In4 struct {
				SinFamily uint16
				SinPort   uint16
				SinAddr   struct{ S_addr uint32 }
				Pad       [8]uint8
			}
			_ [12]byte
		}
		Raddr struct {
			In4 struct {
				SinFamily uint16
				SinPort   uint16
				SinAddr   struct{ S_addr uint32 }
				Pad       [8]uint8
			}
			_ [12]byte
		}
		Protocol agentTrafficProtocolT
		Role     agentEndpointRoleT
	}
	ConnType agentConnTypeT
	_        [4]byte
	Ts       uint64
}

type agentConnTypeT uint32

const (
	agentConnTypeTKConnect       agentConnTypeT = 0
	agentConnTypeTKClose         agentConnTypeT = 1
	agentConnTypeTKProtocolInfer agentConnTypeT = 2
)

type agentEndpointRoleT uint32

const (
	agentEndpointRoleTKRoleClient  agentEndpointRoleT = 1
	agentEndpointRoleTKRoleServer  agentEndpointRoleT = 2
	agentEndpointRoleTKRoleUnknown agentEndpointRoleT = 4
)

type agentKernEvt struct {
	FuncName [16]int8
	Ts       uint64
	Seq      uint64
	Len      uint32
	_        [4]byte
	ConnIdS  struct {
		TgidFd uint64
		Direct agentTrafficDirectionT
		_      [4]byte
	}
	IsSample int32
	Step     uint32
}

type agentTrafficDirectionT uint32

const (
	agentTrafficDirectionTKEgress  agentTrafficDirectionT = 0
	agentTrafficDirectionTKIngress agentTrafficDirectionT = 1
)

type agentTrafficProtocolT uint32

const (
	agentTrafficProtocolTKProtocolUnset   agentTrafficProtocolT = 0
	agentTrafficProtocolTKProtocolUnknown agentTrafficProtocolT = 1
	agentTrafficProtocolTKProtocolHTTP    agentTrafficProtocolT = 2
	agentTrafficProtocolTKProtocolHTTP2   agentTrafficProtocolT = 3
	agentTrafficProtocolTKProtocolMySQL   agentTrafficProtocolT = 4
	agentTrafficProtocolTKProtocolCQL     agentTrafficProtocolT = 5
	agentTrafficProtocolTKProtocolPGSQL   agentTrafficProtocolT = 6
	agentTrafficProtocolTKProtocolDNS     agentTrafficProtocolT = 7
	agentTrafficProtocolTKProtocolRedis   agentTrafficProtocolT = 8
	agentTrafficProtocolTKProtocolNATS    agentTrafficProtocolT = 9
	agentTrafficProtocolTKProtocolMongo   agentTrafficProtocolT = 10
	agentTrafficProtocolTKProtocolKafka   agentTrafficProtocolT = 11
	agentTrafficProtocolTKProtocolMux     agentTrafficProtocolT = 12
	agentTrafficProtocolTKProtocolAMQP    agentTrafficProtocolT = 13
	agentTrafficProtocolTKNumProtocols    agentTrafficProtocolT = 14
)

// loadAgent returns the embedded CollectionSpec for agent.
func loadAgent() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AgentBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load agent: %w", err)
	}

	return spec, err
}

// loadAgentObjects loads agent and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*agentObjects
//	*agentPrograms
//	*agentMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAgentObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAgent()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// agentSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type agentSpecs struct {
	agentProgramSpecs
	agentMapSpecs
}

// agentSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type agentProgramSpecs struct {
	AddReplyToBufferOrList       *ebpf.ProgramSpec `ebpf:"_addReplyToBufferOrList"`
	AddReplyToBufferOrListReturn *ebpf.ProgramSpec `ebpf:"_addReplyToBufferOrListReturn"`
	WriteToClient                *ebpf.ProgramSpec `ebpf:"_writeToClient"`
	WriteToClientReturn          *ebpf.ProgramSpec `ebpf:"_writeToClientReturn"`
	Accept4Entry                 *ebpf.ProgramSpec `ebpf:"accept4_entry"`
	CloseEntry                   *ebpf.ProgramSpec `ebpf:"close_entry"`
	ConnSocketRead               *ebpf.ProgramSpec `ebpf:"connSocketRead"`
	ConnectEntry                 *ebpf.ProgramSpec `ebpf:"connect_entry"`
	DevHardStartXmit             *ebpf.ProgramSpec `ebpf:"dev_hard_start_xmit"`
	DevQueueXmit                 *ebpf.ProgramSpec `ebpf:"dev_queue_xmit"`
	IpQueueXmit                  *ebpf.ProgramSpec `ebpf:"ip_queue_xmit"`
	IpRcvCore                    *ebpf.ProgramSpec `ebpf:"ip_rcv_core"`
	ProcessMultibulkBuffer       *ebpf.ProgramSpec `ebpf:"processMultibulkBuffer"`
	ProcessMultibulkBufferReturn *ebpf.ProgramSpec `ebpf:"processMultibulkBufferReturn"`
	ReadEnter                    *ebpf.ProgramSpec `ebpf:"read_enter"`
	ReadReturn                   *ebpf.ProgramSpec `ebpf:"read_return"`
	RecvfromEnter                *ebpf.ProgramSpec `ebpf:"recvfrom_enter"`
	RecvfromReturn               *ebpf.ProgramSpec `ebpf:"recvfrom_return"`
	SecuritySocketRecvmsgEnter   *ebpf.ProgramSpec `ebpf:"security_socket_recvmsg_enter"`
	SecuritySocketSendmsgEnter   *ebpf.ProgramSpec `ebpf:"security_socket_sendmsg_enter"`
	SendtoEnter                  *ebpf.ProgramSpec `ebpf:"sendto_enter"`
	SendtoReturn                 *ebpf.ProgramSpec `ebpf:"sendto_return"`
	SkbCopyDatagramIter          *ebpf.ProgramSpec `ebpf:"skb_copy_datagram_iter"`
	SockAllocRet                 *ebpf.ProgramSpec `ebpf:"sock_alloc_ret"`
	SysAccept4Ret                *ebpf.ProgramSpec `ebpf:"sys_accept4_ret"`
	SysCloseRet                  *ebpf.ProgramSpec `ebpf:"sys_close_ret"`
	SysConnectRet                *ebpf.ProgramSpec `ebpf:"sys_connect_ret"`
	TcpDestroySock               *ebpf.ProgramSpec `ebpf:"tcp_destroy_sock"`
	TcpQueueRcv                  *ebpf.ProgramSpec `ebpf:"tcp_queue_rcv"`
	TcpRcvEstablished            *ebpf.ProgramSpec `ebpf:"tcp_rcv_established"`
	TcpV4DoRcv                   *ebpf.ProgramSpec `ebpf:"tcp_v4_do_rcv"`
	TcpV4Rcv                     *ebpf.ProgramSpec `ebpf:"tcp_v4_rcv"`
	WriteEnter                   *ebpf.ProgramSpec `ebpf:"write_enter"`
	WriteReturn                  *ebpf.ProgramSpec `ebpf:"write_return"`
	XdpProxy                     *ebpf.ProgramSpec `ebpf:"xdp_proxy"`
}

// agentMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type agentMapSpecs struct {
	AddReplyToBufferOrListArgsMap       *ebpf.MapSpec `ebpf:"_addReplyToBufferOrList_args_map"`
	WriteToClientArgsMap                *ebpf.MapSpec `ebpf:"_writeToClient_args_map"`
	AcceptArgsMap                       *ebpf.MapSpec `ebpf:"accept_args_map"`
	CloseArgsMap                        *ebpf.MapSpec `ebpf:"close_args_map"`
	ConnEvtRb                           *ebpf.MapSpec `ebpf:"conn_evt_rb"`
	ConnInfoMap                         *ebpf.MapSpec `ebpf:"conn_info_map"`
	ConnectArgsMap                      *ebpf.MapSpec `ebpf:"connect_args_map"`
	CurRedisReq                         *ebpf.MapSpec `ebpf:"cur_redis_req"`
	ProcessMultibulkBufferReturnArgsMap *ebpf.MapSpec `ebpf:"processMultibulkBufferReturn_args_map"`
	Rb                                  *ebpf.MapSpec `ebpf:"rb"`
	ReadArgsMap                         *ebpf.MapSpec `ebpf:"read_args_map"`
	RedisClientSeq                      *ebpf.MapSpec `ebpf:"redis_client_seq"`
	RedisResponseSeq                    *ebpf.MapSpec `ebpf:"redis_response_seq"`
	SockKeyConnIdMap                    *ebpf.MapSpec `ebpf:"sock_key_conn_id_map"`
	SockRecmMap                         *ebpf.MapSpec `ebpf:"sock_recm_map"`
	SockXmitMap                         *ebpf.MapSpec `ebpf:"sock_xmit_map"`
	WriteArgsMap                        *ebpf.MapSpec `ebpf:"write_args_map"`
}

// agentObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAgentObjects or ebpf.CollectionSpec.LoadAndAssign.
type agentObjects struct {
	agentPrograms
	agentMaps
}

func (o *agentObjects) Close() error {
	return _AgentClose(
		&o.agentPrograms,
		&o.agentMaps,
	)
}

// agentMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAgentObjects or ebpf.CollectionSpec.LoadAndAssign.
type agentMaps struct {
	AddReplyToBufferOrListArgsMap       *ebpf.Map `ebpf:"_addReplyToBufferOrList_args_map"`
	WriteToClientArgsMap                *ebpf.Map `ebpf:"_writeToClient_args_map"`
	AcceptArgsMap                       *ebpf.Map `ebpf:"accept_args_map"`
	CloseArgsMap                        *ebpf.Map `ebpf:"close_args_map"`
	ConnEvtRb                           *ebpf.Map `ebpf:"conn_evt_rb"`
	ConnInfoMap                         *ebpf.Map `ebpf:"conn_info_map"`
	ConnectArgsMap                      *ebpf.Map `ebpf:"connect_args_map"`
	CurRedisReq                         *ebpf.Map `ebpf:"cur_redis_req"`
	ProcessMultibulkBufferReturnArgsMap *ebpf.Map `ebpf:"processMultibulkBufferReturn_args_map"`
	Rb                                  *ebpf.Map `ebpf:"rb"`
	ReadArgsMap                         *ebpf.Map `ebpf:"read_args_map"`
	RedisClientSeq                      *ebpf.Map `ebpf:"redis_client_seq"`
	RedisResponseSeq                    *ebpf.Map `ebpf:"redis_response_seq"`
	SockKeyConnIdMap                    *ebpf.Map `ebpf:"sock_key_conn_id_map"`
	SockRecmMap                         *ebpf.Map `ebpf:"sock_recm_map"`
	SockXmitMap                         *ebpf.Map `ebpf:"sock_xmit_map"`
	WriteArgsMap                        *ebpf.Map `ebpf:"write_args_map"`
}

func (m *agentMaps) Close() error {
	return _AgentClose(
		m.AddReplyToBufferOrListArgsMap,
		m.WriteToClientArgsMap,
		m.AcceptArgsMap,
		m.CloseArgsMap,
		m.ConnEvtRb,
		m.ConnInfoMap,
		m.ConnectArgsMap,
		m.CurRedisReq,
		m.ProcessMultibulkBufferReturnArgsMap,
		m.Rb,
		m.ReadArgsMap,
		m.RedisClientSeq,
		m.RedisResponseSeq,
		m.SockKeyConnIdMap,
		m.SockRecmMap,
		m.SockXmitMap,
		m.WriteArgsMap,
	)
}

// agentPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAgentObjects or ebpf.CollectionSpec.LoadAndAssign.
type agentPrograms struct {
	AddReplyToBufferOrList       *ebpf.Program `ebpf:"_addReplyToBufferOrList"`
	AddReplyToBufferOrListReturn *ebpf.Program `ebpf:"_addReplyToBufferOrListReturn"`
	WriteToClient                *ebpf.Program `ebpf:"_writeToClient"`
	WriteToClientReturn          *ebpf.Program `ebpf:"_writeToClientReturn"`
	Accept4Entry                 *ebpf.Program `ebpf:"accept4_entry"`
	CloseEntry                   *ebpf.Program `ebpf:"close_entry"`
	ConnSocketRead               *ebpf.Program `ebpf:"connSocketRead"`
	ConnectEntry                 *ebpf.Program `ebpf:"connect_entry"`
	DevHardStartXmit             *ebpf.Program `ebpf:"dev_hard_start_xmit"`
	DevQueueXmit                 *ebpf.Program `ebpf:"dev_queue_xmit"`
	IpQueueXmit                  *ebpf.Program `ebpf:"ip_queue_xmit"`
	IpRcvCore                    *ebpf.Program `ebpf:"ip_rcv_core"`
	ProcessMultibulkBuffer       *ebpf.Program `ebpf:"processMultibulkBuffer"`
	ProcessMultibulkBufferReturn *ebpf.Program `ebpf:"processMultibulkBufferReturn"`
	ReadEnter                    *ebpf.Program `ebpf:"read_enter"`
	ReadReturn                   *ebpf.Program `ebpf:"read_return"`
	RecvfromEnter                *ebpf.Program `ebpf:"recvfrom_enter"`
	RecvfromReturn               *ebpf.Program `ebpf:"recvfrom_return"`
	SecuritySocketRecvmsgEnter   *ebpf.Program `ebpf:"security_socket_recvmsg_enter"`
	SecuritySocketSendmsgEnter   *ebpf.Program `ebpf:"security_socket_sendmsg_enter"`
	SendtoEnter                  *ebpf.Program `ebpf:"sendto_enter"`
	SendtoReturn                 *ebpf.Program `ebpf:"sendto_return"`
	SkbCopyDatagramIter          *ebpf.Program `ebpf:"skb_copy_datagram_iter"`
	SockAllocRet                 *ebpf.Program `ebpf:"sock_alloc_ret"`
	SysAccept4Ret                *ebpf.Program `ebpf:"sys_accept4_ret"`
	SysCloseRet                  *ebpf.Program `ebpf:"sys_close_ret"`
	SysConnectRet                *ebpf.Program `ebpf:"sys_connect_ret"`
	TcpDestroySock               *ebpf.Program `ebpf:"tcp_destroy_sock"`
	TcpQueueRcv                  *ebpf.Program `ebpf:"tcp_queue_rcv"`
	TcpRcvEstablished            *ebpf.Program `ebpf:"tcp_rcv_established"`
	TcpV4DoRcv                   *ebpf.Program `ebpf:"tcp_v4_do_rcv"`
	TcpV4Rcv                     *ebpf.Program `ebpf:"tcp_v4_rcv"`
	WriteEnter                   *ebpf.Program `ebpf:"write_enter"`
	WriteReturn                  *ebpf.Program `ebpf:"write_return"`
	XdpProxy                     *ebpf.Program `ebpf:"xdp_proxy"`
}

func (p *agentPrograms) Close() error {
	return _AgentClose(
		p.AddReplyToBufferOrList,
		p.AddReplyToBufferOrListReturn,
		p.WriteToClient,
		p.WriteToClientReturn,
		p.Accept4Entry,
		p.CloseEntry,
		p.ConnSocketRead,
		p.ConnectEntry,
		p.DevHardStartXmit,
		p.DevQueueXmit,
		p.IpQueueXmit,
		p.IpRcvCore,
		p.ProcessMultibulkBuffer,
		p.ProcessMultibulkBufferReturn,
		p.ReadEnter,
		p.ReadReturn,
		p.RecvfromEnter,
		p.RecvfromReturn,
		p.SecuritySocketRecvmsgEnter,
		p.SecuritySocketSendmsgEnter,
		p.SendtoEnter,
		p.SendtoReturn,
		p.SkbCopyDatagramIter,
		p.SockAllocRet,
		p.SysAccept4Ret,
		p.SysCloseRet,
		p.SysConnectRet,
		p.TcpDestroySock,
		p.TcpQueueRcv,
		p.TcpRcvEstablished,
		p.TcpV4DoRcv,
		p.TcpV4Rcv,
		p.WriteEnter,
		p.WriteReturn,
		p.XdpProxy,
	)
}

func _AgentClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed agent_x86_bpfel.o
var _AgentBytes []byte
